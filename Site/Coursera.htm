<!--
Books recommended : 
Jon Duckett Books of both html and javascript 

Git hub is used to host our files for this course ! 

Git hub configs 
-> Create a new repo
-> Create a index page 
-> clone it on your machine ! 
-> create a sub folder and create a index page in Gh-Pages branch not on master 

Git commands : 1 > to clone we use  /* git clone <Link> */
               2 > to check on which branch we are on we use git status /* git status */
               3 > to change branch we use /* git checkout <branchName> */
               4 > make a new sub directory in the branch using mkdir command 
               5 > To mark to commit any changes  to the git use the command /* git add <whatever file you want to add  or ( . )for all > */
               6 > To commit changes we use /* git commit -m "Message goes  here "*/
               7 > to push the committed changes use /*git push */
               8 > to pull any changes made by other to your local machine we use /*git pull */
               9 > to merge we just push after pulling 
              10 > to delete a branch locally we use /*git branch -d <name>*/
              11 > to delete the remote branch we use /* git push <ref ex : origin > --delete  branch  */




Html basics : 
 they have an opening and closing tag and they enclose something  ex : <p></p>
 tag p and element p are one at the same 
 <p> is opening tag </p> closing tag 
 <br/> has no closing tag 
 attribute is a name-value pair which contain meta data about the element itself 
  ex : <p id="myId"></p> 

  rules : no space after the opening angular bracket 
          no space after the closing angular bracket   
          space must be given after tag name for different attributes 
          attributes can only be given in the opening tag 
          attribute id must be unique for every element or tag
          
    Block and  inline elements in html4 in htm5 its flow and phrasing content 
    respectively ! 

    Block here has its own line and inline will just sit in where ever it is asked to 
    block will have a new line to begin with and to end with 

    block level elements such as <div> can contain inline elements
        where as the inline elements can only contain other inline elements 
        
    block level renders on a new line where as inline elements render on the same line !
     
semantic html elements implies some meaning to the content 
it may help seo (search engine optimization )

semantic tags: 
 heading : 
       <h1> -- > <h6> 
    most import to least important 
    this only used to structure the html page 
    
    
    Header tag <header>
         contains some information  link the logo of the company or  some tag line 
         etc sometimes navigation too 
    nav tag 
          it contains navigation or links to other pages or parts of the website 
     
    section tags :
    defines a section 
    article tag 
    defines an article within a section 
                                        //the article might have sections too no hard and fast rule //
 
    aside tag  
    this tag has some information about the main topic of the page but its not direct 
    its related 
   footer tag 
   has footer information 

   all of these are block level tags 

   lists : 
 html lists : there are structures that allow similar items 
 they are organizational tool 
 <ul> tag : 
     is an unordered list 
 <li> tag is within the ul/ol tags which means list items 
 
 <ol> tag : ordered list li stays the same 


    Character Entity references : 
    
To escape character 
  < - > &lt; 
  > -> &gt; 
  & -> &amp;
  copyright - > &copy;
  Non breaking space - > &nbsp; (This is used where we want to warp a sentence completely when the browser size changes )
  " Quotes" -> &quot; 

links : 
    different types of links : 
    internal links : href attribute is Hypertext reference value of this can be a relative or absolute 
                    title attribute is used to help the visually impaired people 
     a tag is anchor tag and its both a flow content and a phrasing element (block and inline ) 
     Cuz it can house a <div> tag and can also be part of a <div> tag ! 
     
     //it opens up in the same window 

     external links  : their href value is usually a https or http link like going to a different website 
                      
     target attribute can be used to target the opening of the website in a new window with the value _blank 

fragment identifier : # sign is used to achieve fragment identifier 
                      its used to jump to different part of the webpage 
                      also used for single page application 
                      
              there are 2 ways to achieve this 

          1> define anchor tag as follows : 
          <a href= "#section1" > section 1 </a>

          and then 

          <section name="section1" >Stuff...  </section>

          2> define an anchor tag 
          <a href = "#top">Top</a>
          
          <a name= "top"></a>
can be done ;
implemented in HtmlBasics learning thingy

including images : 

<img > tag is used to place images in the document 
attributes : 
        src : source of the image can be relative or absolute path 
       height  : height in pixels or percentage 
       width  : width in pixels or percentages 
       alt : is used by screen reader 

img tag is a inline tag 
width and height are defined to reserve space for the image 
we can use the developers tools to throttle the network to check the same !





-->









<!--
Csszengarden.com 

CSS : -> Cascading style sheets 
         Css is used to style the sheets and it is governed by the html rules 
         thereby creating a perfect match 
    
    Anatomy of Css Rule : 
                        p {
                            color : blue;
                        }
            Here p : is the selector and here all the paragraph elements will be affected 
                 and then its followed by curly braces 
                 then we have declaration 
                 where we have a property and a value 
                 property being a set predefined by css 
                 values are set amount which are associated with each of the property 

            they have colon in b/w and a semicolon to end 
        

            1
            Eg : p{
                 color:blue ;
                 font-size :20px;
                 width : 200px;

            } 
            Here the width means it p must be within 200 px 
   set of css rules is called a style sheet 

Every browser Comes with a default css style by the browser ! 

Css selector are used to determine which html element , or set of elements to apply css 
declarations to . The browser uses the Selector Apis to traverse the DOM and Pick out the matching elements 

Even js uses the Selector apis of the browser to add behavior to them 

3 Types of Selectors : 
1>Element  
2> Id 
3> Class 

1> We just specify the element name : 
   if we specify p {
          color:blue ; 

   }
   here all the paragraphs will only be affected 

2>  here the Class selector is specified with a .
    eg : 
             .blue {
                 color : blue; }
        For this to be applied element must have a class attribute with the class name 
        eg : <p class = "blue" ></p>

3> Id selector is used with a name preceded by a # sign , for this to be applied a attribute must be 
    defined in the element with id attribute 
    eg : #ID{
        color : blue;
    }
    <p id = "ID"></p>

    We can group one or more selectors with a ',' operator 
    eg : div,.blue{
        color :blue;
    }
    blue color text will be applied for both div and class wit .blue value 

    Here id is not reuseable here since a html page can only have one id value 

Combining selectors : 

Element with class selector : Eg :
p.big {
  font-size : 20px ;
}
here select all the elements p with class big 
<div class = "big " > </div>
<p class = "big" > </p>   <-- here the styling only affects this element  


Child Selector : 

Target every child element which is a direct child of another element 
any element which is a direct child (from right to left ! )
Eg : 

article > p  {
    color : blue ;
}

<article>
     <p>   <-- Styling will be applied to this element !
       
        p></p> <-- this element is not affected ! 

     </p>   
</article>

<p></p> <-- this element is not affected ! 

article > .colored {

}
every element with class colored that is a direct child of article element is affected ! 




Descendant Selector : 

Here the element is affected although its not a direct descendant of the element in question ! 
element from right to left at any level is affected 
eg : 
article p { 
    color : blue; 
}

<article> 
      <p> <-- Affected 
          <p></p> <-- Affected 
      </p>

</article>
<p></p> <-- Not affected ! 

eg : 
.colored  p {
     
}                  p if a descendant of .colored class then the styling will be applied ! 



Adjacent sibling selector (Selector + Selector)  MORE INFO ?! 
Genera sibling selector (selector ~ Selector )   MORE INFO ?! 



Pseudo-class selectors address targeting only structures that can be targeted by
simple combination of regular selectors,or the ability to style based on user interaction 
with the page 

eg : like an element changes style when the user moves his mouse over 

Syntax : 

selector : PseudoClassName {

}

Discussed here are : 
:link , :visited , :hover ,:active , :nth-child() 

:link - > they are used to change how a link looks 
Applicable to a tag

:visited - > they are used to change how a visited link looks 
applicable to a tag 

:hover -> style how an element looks when the mouse is hovered over it ! 

:active -> style how an element looks when the user has his mouse clicked on the element and yet to release ! 

:nth-child() -> targets the nth child of no. of elements :D

Look at the css style practice html :D 


Continuation  ->

Style Placement : 
Css can be applied by using a style attribute for any element and is called the inline styling 
It is least reuseable 

External Style Sheets : are css files that can be used again and again 
using the link tag : <link rel ="stylesheet" href="Style.css">

in External Style Sheet : 
  p {
      font-size : 140%;
  }
Here 140% it means it is 140% times the default value 

Conflict Resolution :

how to tell which css rule wins : 
                                Origin ,merge,inheritance,specificity 
        Origin and merge  : The last Declaration wins 
        the html is processed Sequentially that is its top to bottom 
        For precedence of external css think of it as its pasted in the head 

        Declaration are targeting the same element example color and size 
        and if they are from different origin then the declarations merge 

        -- In External Style Sheet :--
        p{
                color : white;
                background-color: grey;
                font-size:140%;

        }
        --In head part of the html -- 
        p{
            color : maroon;
        }

        --IN p -- 
        <p style = "color : black"></p>

        here the output will be grey background black color text for the above p
        if there are more p then they will be maroon and grey back ground and font size will be exts stylesheet font size 
        this is because of origin and merge concepts 

        Inheritance DOM -  >Document Object model 
        if a color property is specified to a body tag every descendent of that element will inherit that property 
        ie.., every children and grand children will be affected 

        Specificity : Most Specific Selector Combination wins 

        Specificity score : 
        Using Style Attribute - > 
        Usage of ID ->
        Class,PseudoClass attribute ->
        Number of Elements - >

        Eg : 

        div #myparg {
            color:blue;
        }
        Using Style Attribute - > 0
        Usage of ID -> 1
        Class,PseudoClass attribute -> 0
        Number of Elements - > 1 

        Score = 101

        div.big p {
            color : green;
        }

        Using Style Attribute - > 0
        Usage of ID -> 0
        Class,PseudoClass attribute -> 1
        Number of Elements - > 2 

        score = 12 

        The first Style wins :D 
        !important can override any other style in the document :
        eg : 
        p{
            color : red !important;
        }


        Styling Text : 
        font-family : ; - > we can give one or more fonts so the user computer can render one or the other 
        we can specify if the users default must be a serif or a sans serif type of font 
        serif are fonts having those swigalles 
        san serif have just T straight lines 

        color : defines the color of the text : 
        here we can directly specify the color or use the hexadecimal values :
        #0000ff here the first 2 zeros are red , the next 2 are green and the last two are blue 
        00 is the lowest level and the ff are the highest value 

        font-style : we can specify if they want to be italic or not 
        font-weight - normal to bold we can also specify with numbers like 900 is bold 
        font-size is the size of the font and default of all the browsers are 16px 

        text-transform can transform the text like capitalize or lowercase or uppercase 

        text-align : can justify the alignment in the block

relative font size : 
        here we can define the relative sizing using em 
        if we have a size defined for the overall parent element then we can use em in the subsequent 
        child elements where the effects will be combined than overwritten 

        eg : 
        body {
            font-size : 120%;
        }
   here the parent element of 3 p tags in body  have a font size of 120% that of the default size 
   <div style = "font-size : 2em;"> 2*120%
       <div style = "font-size : 2em; "> 2*2 *120% 
           <div style ="font-size:0.5em"></div> 2*2*0.5*120%
       </div>
   </div>
        
in html every element is considered a box : 
Each box contains a border ,margin and padding 
The box model refers to the components that make up an HTML box
as well as the rules that govern how these box components affect the layout
as well as how width and height of the box are calculated.


Border : property defines the border of an element 
margin defines the margin of a element 
padding sets the padding area on all the four sides of an element 

The rest is in Style Sheet box : 

Margins : 

Margins left and right cumulative margin will be the  addition of the two 
if the margins will be up and down then cumulative margin will be the larger margin 
margin 


there is always a margin defined by default by the browser which can be reset 
using the * selector this is known as style resetting 


if we have the heigh of the box very less opposed to the content in it 
then there will be content overflowing out of the box 
we can use the overflow property and use auto to add a scroll or we can 
use hidden to show the same and we can use show or scroll to show it always and 
show scroll on both v and h axis respectively

background property 
For solid color : we can use background-color : value ;
will work 

for a background image (Has more priority): background-image : url("~Path ");
url must be file path or a image hosted 

for repeat : we can use background-repeat : it will control the background repeat 

for positioning : background-position: value ; 
can be used with different values right , left , top right etc.. 

we can combine all the above using the background property .. though it will overright all the other 
property (background) : background : url() [repeat] [position] [color]

positioning elements using float : 
Please refer to html Floating element html :D

When a element floats the element is removed from the normal dom flow 
we can clear left right or both when we want elements to float with nothing on the
left right or both sides 

illustrated in the Float.html 

floats don't have vertical margin collapse 

Relative and Absolute Element Positioning:

Static positioning is default for all elements except html 

Relative is when a element is placed relative to its previous spot ..
that spot is reserved in the dom and no other element can take that spot 

if position is set to relative 
then the 
subsequent bottom and right or top and left property values will be defined from the previous position 
ie. it is relative 

Negative values are allowed 
absolute positioning when you set this it will be relative to the parent element 
the nearest parent + it will be removed from the dom and other elements can take its spot 

Refer to Positioning.html 

when we define the position we only give it an anchor then we have to 
give offset which depends on the position property value 

in absolute positioning if all the parents are not not having a postioning achor then i will use the html's default achor which is set to 
relative  



media queries : 
Are used to define style sheets based on set condition : 
these style sheets get executed when the required conditions meet 

syntax : @media (Condition) {
    styles rules ://
    selector {
        property:value ;
    }
}
 some common features include > : @media (max-width : 800px) {}
                                  @media (min-width : 800px) {}
                                  @media (orientation : portrait) {}
                                  @media screen {}
                                  @media print {}
max width is the maximum width for which the styles apply
min width is the minimum width for which the styles apply 
orientation for portrait or landscape 
screen and print 
you can also height instead of width

there can be logical operator : eg : and 
     @media (max-width : 800px) and (min-width : 200px){}

     or is represented using ',' operator 

media queries are used only after defining a base style and be careful about the range of width or height 
one style can overlap and apply on the second 

eg : @media (min-width : 100px )
     @media (max-width : 99px )

code part can be found in media query html document 

large devices can be at least 1200px wide 
small devices can be at least 992px b/w 1199px
the point b/w one media query and the other is known as breakpoints 
   


Responsive Device :

A site designed to adapt its layout to the viewing environment by using fluid 
proportion based grids flexible images and css3 media quires 

Sites layout must adapt to the size of the device 
Content verbosity or its visual delivery may change 

Alternative to responsive device 
The server can detect the device the user is using and can serve either a 
mobile based browser or a web based browser 

but this is not better than a responsive design because then u have to maintain 2 different websites and 
u cant possible target all the sub different device in the mobile device section 

in a responsive device framework the page layout is divided into 12 column grids 
12 is so because its divisible by many multiples like 2 , 3, 4 ,6 and 12 
so it can be divided into 3 or 2 columns easily 


The complete width is 100% there fore each column is 100/12 that is 8.33%
We can also nested layouts like 4 4 and 4 in main and then 3333 in each of the 4 4 and 4 

Code Example can be found in responsive Design html 

Twitter Bootstrap : 
 Bootstrap is the most popular html css and js framework for developing responsive
mobile first projects on the web 

The are some html constructs requirement but its not to aggressive it also has a cool js framework 


Find More on bootstap in the folder with the same name !


-->


